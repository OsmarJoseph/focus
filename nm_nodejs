#!/usr/bin/env node
import { runAppleScript } from "run-applescript";

import fs from "node:fs/promises";

async function getMessage() {
  const header = new Uint32Array(1);
  await readFullAsync(1, header);
  const message = await readFullAsync(header[0]);
  return message;
}

async function readFullAsync(length, buffer = new Uint8Array(65536)) {
  const data = [];
  while (data.length < length) {
    const input = await fs.open("/dev/stdin");
    const { bytesRead } = await input.read({ buffer });
    await input.close();
    if (bytesRead === 0) {
      break;
    }
    data.push(...buffer.subarray(0, bytesRead));
  }
  return new Uint8Array(data);
}

async function sendMessage(message) {
  const header = Buffer.from(new Uint32Array([message.length]).buffer);
  const stdout = process.stdout;
  await stdout.write(header);
  await stdout.write(message);
}

try {
  const phase = await runAppleScript('tell application "Flow" to getPhase');

  if (phase === "Flow") {
    const time1 = await runAppleScript('tell application "Flow" to getTime');
    await new Promise((resolve) => setTimeout(resolve, 1000));
    const time2 = await runAppleScript('tell application "Flow" to getTime');

    if (time1 !== time2) {
      const message = new TextEncoder().encode(`"${phase}"`);
      await sendMessage(message);
    }
  }
} catch (e) {
  console.error(e);
  process.exit(1);
}
